package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"stockels/graph"
	"stockels/graph/instance"
	"stockels/graph/service"
	"stockels/middleware"
)

// StockSubscribes is the resolver for the stockSubscribes field.
func (r *mutationResolver) StockSubscribes(ctx context.Context, stocks []*instance.GetStockData) ([]*instance.Subscribtion, error) {
	gc, err := middleware.ContextFromAuthMiddleware(ctx)
	if err != nil {
		return nil, err
	}

	result, err := service.SubscribeMultipleStock(stocks, gc)
	return result, nil
}

// GetStocks is the resolver for the getStocks field.
func (r *queryResolver) GetStocks(ctx context.Context, stocks []*instance.GetStockData) ([]*instance.StockData, error) {
	result, err := service.GetMultipleStock(stocks)
	return result, err
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
