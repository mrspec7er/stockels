package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"stockels/graph"
	"stockels/graph/module/subscribtion"
	"stockels/graph/object"
	"stockels/middleware"
)

// StockSubscribes is the resolver for the stockSubscribes field.
func (r *mutationResolver) StockSubscribes(ctx context.Context, stocks []*object.GetStockData) ([]*object.Subscribtion, error) {
	user, err := middleware.GetAuthContextMiddleware(ctx)
	if err != nil {
		return nil, err
	}
	return subscribtion.SubscribeMultipleStockService(stocks, user)
}

// GetStockSubscribe is the resolver for the getStockSubscribe field.
func (r *mutationResolver) GetStockSubscribe(ctx context.Context) ([]*object.StockData, error) {
	user, err := middleware.GetAuthContextMiddleware(ctx)
	if err != nil {
		return nil, err
	}
	return subscribtion.GetSubscribtionStockService(*user)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
